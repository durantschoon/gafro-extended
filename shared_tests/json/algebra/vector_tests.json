{
    "test_suite": "vector_tests",
    "version": "1.0",
    "description": "Vector operations and properties",
    "test_categories": {
        "vector_creation": [
            {
                "test_name": "vector_default_creation",
                "description": "Test default vector creation (should be zero vector)",
                "category": "vector_creation",
                "inputs": {},
                "expected_outputs": {
                    "e1": 0.0,
                    "e2": 0.0,
                    "e3": 0.0
                },
                "tolerance": 1e-10,
                "language_specific": {
                    "cpp": {
                        "test_code": "Vector<double> vector;",
                        "includes": [
                            "<gafro/gafro.hpp>"
                        ]
                    },
                    "rust": {
                        "test_code": "let vector = Vector::<f64>::new();",
                        "includes": [
                            "gafro::vector"
                        ]
                    }
                },
                "tags": [
                    "basic",
                    "creation"
                ]
            },
            {
                "test_name": "vector_creation_from_parameters",
                "description": "Test vector creation with specific parameters",
                "category": "vector_creation",
                "inputs": {
                    "x": 1.0,
                    "y": 2.0,
                    "z": 3.0
                },
                "expected_outputs": {
                    "e1": 1.0,
                    "e2": 2.0,
                    "e3": 3.0
                },
                "tolerance": 1e-10,
                "language_specific": {
                    "cpp": {
                        "test_code": "Vector<double> vector(1.0, 2.0, 3.0);",
                        "includes": [
                            "<gafro/gafro.hpp>"
                        ]
                    },
                    "rust": {
                        "test_code": "let vector = Vector::<f64>::new(1.0, 2.0, 3.0);",
                        "includes": [
                            "gafro::vector"
                        ]
                    }
                },
                "tags": [
                    "basic",
                    "creation"
                ]
            },
            {
                "test_name": "vector_creation_from_vector",
                "description": "Test vector creation from another vector (copy constructor)",
                "category": "vector_creation",
                "inputs": {
                    "source_x": 1.0,
                    "source_y": 2.0,
                    "source_z": 3.0
                },
                "expected_outputs": {
                    "e1": 1.0,
                    "e2": 2.0,
                    "e3": 3.0
                },
                "tolerance": 1e-10,
                "language_specific": {
                    "cpp": {
                        "test_code": "Vector<double> vector1(1.0, 2.0, 3.0); Vector<double> vector2(vector1);",
                        "includes": [
                            "<gafro/gafro.hpp>"
                        ]
                    },
                    "rust": {
                        "test_code": "let vector1 = Vector::<f64>::new(1.0, 2.0, 3.0); let vector2 = vector1.clone();",
                        "includes": [
                            "gafro::vector"
                        ]
                    }
                },
                "tags": [
                    "basic",
                    "creation",
                    "copy"
                ]
            },
            {
                "test_name": "vector_creation_from_multivector",
                "description": "Test vector creation from multivector",
                "category": "vector_creation",
                "inputs": {
                    "mv_values": [
                        1.0,
                        2.0,
                        3.0
                    ]
                },
                "expected_outputs": {
                    "e1": 1.0,
                    "e2": 2.0,
                    "e3": 3.0
                },
                "tolerance": 1e-10,
                "language_specific": {
                    "cpp": {
                        "test_code": "Multivector<double, blades::e1, blades::e2, blades::e3> mv({1.0, 2.0, 3.0}); Vector<double> vector(mv);",
                        "includes": [
                            "<gafro/gafro.hpp>"
                        ]
                    },
                    "rust": {
                        "test_code": "let mv = Multivector::<f64>::new(vec![1.0, 2.0, 3.0]); let vector = Vector::from_multivector(mv);",
                        "includes": [
                            "gafro::vector",
                            "gafro::multivector"
                        ]
                    }
                },
                "tags": [
                    "creation",
                    "conversion"
                ]
            }
        ],
        "vector_arithmetic": [
            {
                "test_name": "vector_addition",
                "description": "Test vector addition operation",
                "category": "vector_arithmetic",
                "inputs": {
                    "v1_x": 1.0,
                    "v1_y": 2.0,
                    "v1_z": 3.0,
                    "v2_x": 10.0,
                    "v2_y": 20.0,
                    "v2_z": 30.0
                },
                "expected_outputs": {
                    "e1": 11.0,
                    "e2": 22.0,
                    "e3": 33.0
                },
                "tolerance": 1e-10,
                "language_specific": {
                    "cpp": {
                        "test_code": "Vector<double> vector1(1.0, 2.0, 3.0); Vector<double> vector2(10.0, 20.0, 30.0); auto result = vector1 + vector2;",
                        "includes": [
                            "<gafro/gafro.hpp>"
                        ]
                    },
                    "rust": {
                        "test_code": "let vector1 = Vector::<f64>::new(1.0, 2.0, 3.0); let vector2 = Vector::<f64>::new(10.0, 20.0, 30.0); let result = vector1 + vector2;",
                        "includes": [
                            "gafro::vector"
                        ]
                    }
                },
                "tags": [
                    "arithmetic",
                    "addition"
                ]
            }
        ]
    }
}